// Include this
// #include "/Engine/Private/Common.ush"
// Or this, this is included in Common.ush
#include "/Engine/Public/Platform.ush"

// These contain various functions and structs that may be useful - not a complete list
// #include "/Engine/Generated/GeneratedUniformBuffers.ush" 
#include "/Engine/Private/DeferredShadingCommon.ush"
// #include "/Engine/Private/ColorUtils.ush"
// #include "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
// #include "/Engine/Private/Random.ush"
// #include "/Engine/Private/SceneTexturesCommon.ush"
// #include "/Engine/Private/SceneData.ush"
// #include "/Engine/Private/Common.ush"
// #include "/Engine/Private/DeferredShadingCommon.ush"
// #include "/Engine/Private/ScreenPass.ush"
// #include "/Engine/Private/SceneTexturesCommon.ush"
// #include "/Engine/Private/SceneTextureParameters.ush"

#include "Example.ush"

// For better colour matching need to use better colours spaces such as CIELAB
// https://en.wikipedia.org/wiki/CIELAB_color_space

// And use DeltaE to get the perceptual difference between colours
// https://zschuessler.github.io/DeltaE/learn/

// Colour math function psuedo code https://www.easyrgb.com/en/math.php

struct FColourReplace
{
	float3 TargetColour;
	float Tolerance;
	float3 ReplacementColour;
};

// Read-write textures
RWTexture2D<float4> SceneColorTexture;
RWTexture2D<float4> ColourReplaceMask;

// Readonly buffer
StructuredBuffer<FColourReplace> ColourReplacementDataBuffer;

// Buffer used to store the indirect execution data
RWByteAddressBuffer ExecuteIndirectBuffer;

// This is just to give an idea on how indirect execution works
float2 Groups;

[numthreads(32, 32, 1)]
void ColourChangeMaskCS(uint3 DispatchThreadID : SV_DispatchThreadID, uint3 GroupThreadID : SV_GroupThreadID)
{
	// Perform the colour change on the first 2

	
	if(DispatchThreadID.x == 0 && DispatchThreadID.y == 0)
	{
		// Write the number of elements to the buffer
		ExecuteIndirectBuffer.Store(4 * 0, Groups.x);
		ExecuteIndirectBuffer.Store(4 * 1, Groups.y);
		ExecuteIndirectBuffer.Store(4 * 2, 1);   
	}
}

[numthreads(32, 32, 1)]
void ApplyColourChangeCS(uint3 DispatchThreadID : SV_DispatchThreadID, uint3 GroupThreadID : SV_GroupThreadID)
{
	// Perform the colour change on the remaining one
}